#!/bin/bash

writeArgumentError() {
    echo "Wrong argument syntax" >&2
    exit 1
}

filterOut() {
    if [ "$aFilter" != "" ]; then
        if [ "$(date -d "$aFilter" '+%Y-%m-%d %H:%M:%S' 2>/dev/null)" = "$aFilter" ]; then
            data=$(echo "$data" | awk -v cutoff="$aFilter" -F ';' '$2 > cutoff')
        else
            writeArgumentError
        fi
    fi

    if [ "$bFilter" != "" ]; then
        if [ "$(date -d "$bFilter" '+%Y-%m-%d %H:%M:%S' 2>/dev/null)" = "$bFilter" ]; then
            data=$(echo "$data" | awk -v cutoff="$bFilter" -F ';' '$2 < cutoff')
        else
            writeArgumentError
        fi
    fi

    if [ "$cFilter" != "" ]; then
        data=$(echo "$data" | awk -v var="$cFilter" -F ';' '$3 == var')
    fi
}

addData() {
    if [ ! -f "$fileName" ]; then
        echo "Error: File '$fileName' does not exist."
        exit 1
    fi

    if [[ "$fileName" == *.gz ]]; then
        data+=$(gunzip -c "$fileName")
    else
        data+=$(cat "$fileName")
    fi
}

data=""
fileName=""
traderName=""
aFilter=""
bFilter=""
cFilter=""
command=""
argumentIndex=1
skipNext=false

for var in "$@"; do
    if [ "$skipNext" = true ]; then
        ((argumentIndex++))
        skipNext=false
        continue
    fi
    if [ "$var" = "-a" ]; then
        skipNext=true
        ((argumentIndex++))
        aFilter="${!argumentIndex}"
        continue
    elif [ "$var" = "-b" ]; then
        skipNext=true
        ((argumentIndex++))
        bFilter="${!argumentIndex}"
        continue
    elif [ "$var" = "-c" ]; then
        skipNext=true
        ((argumentIndex++))
        cFilter="${!argumentIndex}"
        continue
    elif [[ "$var" == *.gz || "$var" == *.log ]]; then
        fileName="$var"
        addData
    else
        if [ "$command" == "" ]; then
            command="$var"
        fi
        traderName="$var"
    fi
    ((argumentIndex++))
done

if [ "$traderName" = "$command" ]; then
    command=""
fi

if [ "$traderName" == "" ]; then
    writeArgumentError
fi

export POSIXLY_CORRECT=yes
export LC_NUMERIC=C
if [ -z "$XTF_PROFIT" ]; then
    export XTF_PROFIT=20
fi

if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then

    echo "Usage: [ -h | --help ] [ FILTER ] [ COMMAND ] TRADER_NAME LOG_FILE_PATH"
    echo ""
    echo "Filters:"
    echo "  -a DATE        Filter out records after DATE (YYYY-MM-DD HH:MM:SS)"
    echo "  -b DATE        Filter out records before DATE (YYYY-MM-DD HH:MM:SS)"
    echo "  -c CURRENCY    Filter out records for the specified CURRENCY"
    echo ""
    echo "Commands:"
    echo "  list           List all records for the specified TRADER_NAME"
    echo "  list-currency  List all unique currencies for the specified TRADER_NAME"
    echo "  status         Show status summary for each currency for the specified TRADER_NAME"
    echo "  profit         Show fake profit summary for each currency for the specified TRADER_NAME"
    echo ""
    echo "Examples:"
    echo "  script.sh -a '2024-03-17 08:00:00' list Alice file.log"
    echo "  script.sh -c EUR list-currency Bob file.log.gz"
    echo "  script.sh -b '2024-03-17 08:00:00' status Carol path/to/file.log"
    echo "  script.sh profit David file.log"
    echo ""
    exit 0

elif [ "$command" = "list" ]; then
    if [ ! $# -gt 2 ]; then
        writeArgumentError
    fi
    filterOut
    data=$(echo "$data" | awk -v var="$traderName" -F ';' '$1 == var')
    echo "$data"
elif [ "$command" = "list-currency" ]; then
    if [ ! $# -gt 2 ]; then
        writeArgumentError
    fi
    filterOut
    data=$(echo "$data" | awk -v var="$traderName" -F ';' '$1 == var && !seen[$3]++ {print $3} ' | awk '{print $0 | "sort"}')
    echo "$data"

elif [ "$command" = "status" ]; then
    if [ ! $# -gt 2 ]; then
        writeArgumentError
    fi
    filterOut
    data=$(echo "$data" | awk -v var="$traderName" 'BEGIN { FS = ";" } $1 == var { sum[$3] += $4 } END { for (group in sum) printf "%s: %.4f\n", group, sum[group] }' | awk '{print $0 | "sort"}')
    echo "$data"
elif [ "$command" = "profit" ]; then
    if [ ! $# -gt 2 ]; then
        writeArgumentError
    fi
    filterOut
    data=$(echo "$data" | awk -v var="$traderName" -v profitMulti="$XTF_PROFIT" '
    BEGIN { FS = ";" }
    $1 == var {
        sum[$3] += $4 
    } 
    END {
        for (group in sum){
            if(sum[group] > 0)
            {
                sum[group] *= profitMulti / 100 + 1
            }
            printf "%s: %.4f\n", group, sum[group] 
        }
    }' | awk '{print $0 | "sort"}')
    echo "$data"
else
    if [ ! $# -gt 1 ]; then
        writeArgumentError
    fi
    filterOut
    data=$(echo "$data" | awk -v var="$traderName" -F ';' '$1 == var' | awk '{print $0 | "sort"}')
    echo "$data"
fi
