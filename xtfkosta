#!/bin/bash

# Function to display argument error message and exit
showArgumentError() {
    echo "Error: Incorrect argument syntax." >&2
    exit 1
}

showHelp() {
    echo "POUŽITÍ:"
    echo "    xtf [-h|--help] [FILTR] [PŘÍKAZ] UŽIVATEL LOG [LOG2 [...]]"
    echo ""
    echo "VOLBY:"
    echo "    PŘÍKAZ může být jeden z:"
    echo "        list - výpis záznamů pro daného uživatele."
    echo "        list-currency - výpis seřazeného seznamu vyskytujících se měn."
    echo "        status - výpis skutečného stavu účtu seskupeného a seřazeného dle jednotlivých měn."
    echo "        profit - výpis stavu účtu zákazníka se započítaným fiktivním výnosem."
    echo "    FILTR může být kombinace následujících:"
    echo "        -a DATETIME - after: jsou uvažovány pouze záznamy PO tomto datu a čase (bez něj). DATETIME je ve formátu YYYY-MM-DD HH:MM:SS."
    echo "        -b DATETIME - before: jsou uvažovány pouze záznamy PŘED tímto datem a časem (bez něj)."
    echo "        -c CURRENCY - jsou uvažovány pouze záznamy odpovídající dané měně."
    echo "    -h a --help vypíšou nápovědu s krátkým popisem každého příkazu a přepínače."
}

# Function to filter data based on specified criteria
applyFilters() {
    if [ "$filterA" != "" ]; then
        if [ "$(date -d "$filterA" '+%Y-%m-%d %H:%M:%S' 2>/dev/null)" = "$filterA" ]; then
            data=$(echo "$data" | awk -v cutoff="$filterA" -F ';' '$2 > cutoff')
        else
            showArgumentError
        fi
    fi

    if [ "$filterB" != "" ]; then
        if [ "$(date -d "$filterB" '+%Y-%m-%d %H:%M:%S' 2>/dev/null)" = "$filterB" ]; then
            data=$(echo "$data" | awk -v cutoff="$filterB" -F ';' '$2 < cutoff')
        else
            showArgumentError
        fi
    fi

    if [ "$filterC" != "" ]; then
        data=$(echo "$data" | awk -v var="$filterC" -F ';' '$3 == var')
    fi
}

# Function to add data from specified file wich is at path specified by source file
readData() {
    if [ ! -f "$sourceFile" ]; then
        echo "Error: File '$sourceFile' does not exist." >&2
    fi

    if [[ "$sourceFile" == *.gz ]]; then
        data+=$(gunzip -c "$sourceFile")
    else
        data+=$(cat "$sourceFile")
    fi
}

# Initialize variables
data=""
sourceFile=""
command=""
trader=""
filterA=""
filterC=""
skipIndex=0
filterB=""
index=1

# Parse command-line arguments
for arg in "$@"; do
    if [ "$skipIndex" = "$index" ]; then
        ((index++))
        continue
    fi

    case $arg in
    -a)
        ((index++))
        skipIndex="$index"
        filterA="${!index}"
        ;;
    -b)
        ((index++))
        skipIndex="$index"
        filterB="${!index}"
        ;;
    -c)
        ((index++))
        skipIndex="$index"
        filterC="${!index}"
        ;;
    *.gz | *.log)
        sourceFile="$arg"
        readData
        ;;
    *)
        if [ "$command" == "" ]; then
            command="$arg"
        fi
        trader="$arg"
        ;;
    esac
    ((index++))
done

# Validate trader name
if [ "$trader" = "$command" ]; then
    command=""
fi

if [ "$trader" == "" ]; then
    showArgumentError
    exit 1
fi

# Set environment variables
export POSIXLY_CORRECT=yes
export LC_NUMERIC=C
if [ -z "$XTF_PROFIT" ]; then
    export XTF_PROFIT=20
fi

# Process command
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    showHelp
    exit 0
elif [ "$command" = "list" ]; then
    if [ ! $# -gt 2 ]; then
        showArgumentError
    fi
    applyFilters
    data=$(echo "$data" | awk -v var="$trader" -F ';' '$1 == var')
    echo "$data"
elif [ "$command" = "list-currency" ]; then
    if [ ! $# -gt 2 ]; then
        showArgumentError
        exit 1
    fi
    applyFilters
    data=$(echo "$data" | awk -v var="$trader" -F ';' '$1 == var && !seen[$3]++ {print $3}' | sort)
    echo "$data"
elif [ "$command" = "status" ]; then
    if [ ! $# -gt 2 ]; then
        showArgumentError
        exit 1
    fi
    applyFilters
    data=$(echo "$data" | awk -v var="$trader" '
    BEGIN { FS = ";" }
    $1 == var { 
        sum[$3] += $4 
        } 
    END { 
        for (group in sum){
            printf "%s : %.4f\n", group, sum[group] 
            }
        }' | sort)
    echo "$data"

elif [ "$command" = "profit" ]; then
    if [ ! $# -gt 2 ]; then
        showArgumentError
        exit 1
    fi
    applyFilters
    data=$(echo "$data" | awk -v var="$trader" -v profitMargin="$XTF_PROFIT" '
    BEGIN { FS = ";" }
    $1 == var {
        sum[$3] += $4
    }
    END {
        for (group in sum){
            if(sum[group] > 0)
            {
                sum[group] *= profitMargin / 100 + 1
            }
            printf "%s : %.4f\n", group, sum[group]
        }
    }' | sort)
    echo "$data"
else
    if [ ! $# -gt 1 ]; then
        showArgumentError
        exit 1
    fi
    applyFilters
    data=$(echo "$data" | awk -v var="$trader" -F ';' '$1 == var' | sort)
    echo "$data"
fi
